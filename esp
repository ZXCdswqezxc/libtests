local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

-- Загружаем оригинальную библиотеку ESP
local esp = loadstring(game:HttpGet('https://raw.githubusercontent.com/ZXCdswqezxc/libtests/refs/heads/main/es'))()

-- Инициализируем настройки ESP
esp.enabled = false         -- ESP выключен по умолчанию
esp.teamcheck = false       -- Проверка команды выключена
esp.visiblecheck = false    -- Проверка видимости выключена
esp.outlines = true         -- Обводка включена
esp.limitdistance = false   -- Ограничение дистанции выключено
esp.maxdistance = 5000      -- Максимальная дистанция (если включено)

-- Настройки трейсеров
esp.tracers = false         -- Трейсеры выключены по умолчанию
esp.tracer_color = Color3.fromRGB(255, 255, 255)  -- Цвет трейсеров (белый)
esp.tracer_origin = "Bottom" -- Место начала трейсеров (Bottom, Top, Center, Mouse)
esp.tracer_thickness = 1    -- Толщина трейсеров

-- Настройка боксов
esp.team_boxes[1] = false                       -- Выключены по умолчанию
esp.team_boxes[2] = Color3.fromRGB(0, 255, 0)   -- Зелёный цвет
esp.team_boxes[3] = Color3.fromRGB(0, 255, 0)   -- Цвет заливки
esp.team_boxes[4] = 0.2                         -- Прозрачность заливки

-- Настройка полосок здоровья
esp.team_healthbar[1] = false                   -- Выключены по умолчанию
esp.team_healthbar[2] = Color3.fromRGB(0, 255, 0)  -- Цвет полного здоровья (зелёный)
esp.team_healthbar[3] = Color3.fromRGB(255, 0, 0)  -- Цвет низкого здоровья (красный)
esp.healthbar_thickness = 1                     -- Толщина полоски здоровья в пикселях

-- Настройка текстовых элементов
esp.team_names[1] = false                       -- Имена игроков выключены
esp.team_names[2] = Color3.fromRGB(255, 255, 255) -- Белый цвет для имен
esp.team_health = false                         -- Числовые значения здоровья ВСЕГДА выключены
esp.team_distance = false                       -- Отображение дистанции выключено
esp.team_weapon[1] = false                      -- Отображение оружия ВСЕГДА выключено (убираем из интерфейса)
esp.font = 'Plex'                               -- Шрифт по умолчанию
esp.textsize = 13                               -- Размер текста

-- Настройка фиксированных размеров
esp.fixed_size_enabled = true      -- Включаем фиксированные размеры по умолчанию
esp.fixed_box_width = 4           -- Ширина бокса
esp.fixed_box_height = 6          -- Высота бокса

-- Деактивируем настройки врагов, так как они не используются
esp.enemy_boxes[1] = false

-- Переменная для отслеживания положения мыши
local mousePosition = Vector2.new(0, 0)
game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        mousePosition = Vector2.new(input.Position.X, input.Position.Y)
    end
end)

-- Функция для получения начальной точки трейсера
local function getTracerOrigin()
    local camera = game:GetService("Workspace").CurrentCamera
    local viewportSize = camera.ViewportSize
    
    if esp.tracer_origin == "Bottom" then
        return Vector2.new(viewportSize.X / 2, viewportSize.Y)
    elseif esp.tracer_origin == "Top" then
        return Vector2.new(viewportSize.X / 2, 0)
    elseif esp.tracer_origin == "Center" then
        return Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)
    elseif esp.tracer_origin == "Mouse" then
        return mousePosition
    else
        return Vector2.new(viewportSize.X / 2, viewportSize.Y) -- По умолчанию снизу
    end
end

-- Исправляем проблему с "застреванием" ESP элементов
-- Переопределяем функцию удаления ESP объектов
local originalRemove = esp.remove
esp.remove = function(self, plr)
    local objects = self.players[plr.Name]
    if objects then
        -- Принудительно скрываем все элементы перед удалением
        for i, v in next, objects do
            if i == 'chams' then
                if v.ins and v.ins.Parent then
                    v.ins.Enabled = false
                    v.ins:Destroy()
                end
            else
                if v and v.Visible ~= nil then
                    v.Visible = false
                end
                if v and v.Remove then
                    v:Remove()
                end
            end
        end
    end
    -- Очищаем из таблицы
    self.players[plr.Name] = nil
end

-- Переопределяем функцию отключения ESP для игрока
local originalDisable = esp.disable
esp.disable = function(self, plr)
    local objects = self.players[plr.Name]
    if objects then
        for i, v in next, objects do
            -- Принудительно скрываем все элементы
            if i == 'chams' then
                if v.ins then
                    v.ins.Enabled = false
                end
            else
                if v then
                    v.Visible = false
                end
            end
        end
    end
end

-- Сохраняем оригинальную функцию обновления ESP
local originalUpdate = esp.update

-- Переопределяем функцию update для поддержки настройки толщины полоски здоровья и трейсеров
esp.update = function()
    -- Очистка несуществующих игроков
    for plrName, _ in next, esp.players do
        local player = game:GetService('Players'):FindFirstChild(plrName)
        if not player then
            -- Игрок не существует, удаляем его ESP
            for _, obj in next, esp.players[plrName] do
                if _ == 'chams' then
                    if obj.ins then
                        obj.ins.Enabled = false
                        obj.ins:Destroy()
                    end
                else
                    if obj and obj.Visible ~= nil then
                        obj.Visible = false
                    end
                    if obj and obj.Remove then
                        obj:Remove()
                    end
                end
            end
            esp.players[plrName] = nil
            continue
        end
    end
    
    for plr, drawing in next, esp.players do
        local player = game:GetService('Players'):FindFirstChild(plr)
        if not player then esp.players[plr] = nil continue end
        
        if esp.enabled and esp.checkalive(player) then
            local character = esp.getcharacter(player)
            if not character or not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Humanoid") then
                esp:disable(player)
                continue
            end
            
            local pass = esp:check(player)
            local position, onScreen = game.Workspace.CurrentCamera:WorldToViewportPoint(character.HumanoidRootPart.Position)
            local centerMassPos = character.HumanoidRootPart.CFrame
            local transparency = 1
            if esp.limitdistance then
                local distance = (game.Workspace.CurrentCamera.CFrame.Position - centerMassPos.Position).Magnitude
                if distance > esp.maxdistance then
                    esp:disable(player)
                    continue
                end
            end
            local health = math.floor(character.Humanoid.Health)
            
            -- Вызываем оригинальную функцию
            originalUpdate()
            
            -- Обновляем толщину полоски здоровья
            local flag = 'team_'
            if esp.checkteam(player, false) then flag = 'enemy_' end
            if table.find(esp.priority_players, player) then flag = 'priority_' end
            
            -- Обновляем толщину полоски здоровья
            if drawing.bar and drawing.bar.Visible then
                local smallestX, biggestX, smallestY, biggestY
                
                -- Находим координаты бокса
                for i, renderedObj in pairs(drawing) do
                    if i == 'box' and renderedObj.Visible then
                        smallestX = renderedObj.Position.X
                        smallestY = renderedObj.Position.Y
                        biggestX = smallestX + renderedObj.Size.X
                        biggestY = smallestY + renderedObj.Size.Y
                        break
                    end
                end
                
                if smallestX and smallestY and biggestY then
                    local thickness = esp.healthbar_thickness or 1
                    
                    -- Обновляем размеры и положение полоски здоровья
                    drawing.bar.Size = Vector2.new(thickness, (-health / 100 * (biggestY - smallestY + 2)) + 3) 
                    drawing.bar.Position = Vector2.new(smallestX - thickness - 2, smallestY + drawing.bar_outline.Size.Y)
                    
                    drawing.bar_inline.Size = Vector2.new(thickness, (- 1 * (biggestY - smallestY + 2)) + 3)
                    drawing.bar_inline.Position = drawing.bar.Position
                    
                    drawing.bar_outline.Size = Vector2.new(thickness, biggestY - smallestY)
                    drawing.bar_outline.Position = Vector2.new(smallestX - thickness - 1, smallestY + 1)
                end
            end
            
            -- Обновляем шрифт текстовых элементов
            if drawing.name and drawing.name.Visible then
                drawing.name.Font = Drawing.Fonts[esp.font] or 1 -- Применяем шрифт
            end
            
            if drawing.name_outline and drawing.name_outline.Visible then
                drawing.name_outline.Font = Drawing.Fonts[esp.font] or 1
            end
            
            if drawing.distance and drawing.distance.Visible then
                drawing.distance.Font = Drawing.Fonts[esp.font] or 1
            end
            
            if drawing.distance_outline and drawing.distance_outline.Visible then
                drawing.distance_outline.Font = Drawing.Fonts[esp.font] or 1
            end
            
            -- Обновляем трейсер
            if onScreen and position then
                -- Создаем трейсер, если его еще нет
                if not drawing.tracer then
                    drawing.tracer = Drawing.new("Line")
                    drawing.tracer.Thickness = esp.tracer_thickness
                    drawing.tracer.Color = esp.tracer_color
                    drawing.tracer.Transparency = 1
                    drawing.tracer.Visible = false
                end
                
                -- Обновляем видимость трейсера
                drawing.tracer.Visible = esp.tracers
                
                -- Если трейсеры включены, обновляем их позицию
                if esp.tracers then
                    local origin = getTracerOrigin()
                    drawing.tracer.From = origin
                    drawing.tracer.To = Vector2.new(position.X, position.Y)
                    drawing.tracer.Thickness = esp.tracer_thickness
                    drawing.tracer.Color = esp.tracer_color
                    drawing.tracer.Transparency = 1
                end
            elseif drawing.tracer then
                drawing.tracer.Visible = false
            end
            
            -- Всегда отключаем отображение оружия
            if drawing.weapon then
                drawing.weapon.Visible = false
            end
            if drawing.weapon_outline then
                drawing.weapon_outline.Visible = false
            end
        else
            esp:disable(player)
        end
    end
end

-- Создаем функцию для обработки шрифтов
local originalAddPlayer = esp.addplayer
esp.addplayer = function(self, plr)
    local ret = originalAddPlayer(self, plr)
    
    -- Если у игрока есть ESP элементы, устанавливаем для них шрифт
    if self.players[plr.Name] then
        local drawing = self.players[plr.Name]
        
        if drawing.name then
            drawing.name.Font = Drawing.Fonts[self.font] or 1
        end
        
        if drawing.name_outline then
            drawing.name_outline.Font = Drawing.Fonts[self.font] or 1
        end
        
        if drawing.distance then
            drawing.distance.Font = Drawing.Fonts[self.font] or 1
        end
        
        if drawing.distance_outline then
            drawing.distance_outline.Font = Drawing.Fonts[self.font] or 1
        end
        
        -- Добавляем трейсер, если он нужен
        if not drawing.tracer then
            drawing.tracer = Drawing.new("Line")
            drawing.tracer.Thickness = self.tracer_thickness
            drawing.tracer.Color = self.tracer_color
            drawing.tracer.Transparency = 1
            drawing.tracer.Visible = self.tracers
        end
    end
    
    return ret
end

-- Добавляем преобразование названий шрифтов в индексы
Drawing.Fonts = {
    ["Plex"] = 1,
    ["System"] = 2,
    ["UI"] = 3,
    ["Monospace"] = 4,
    ["SourceSans"] = 0
}

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Optimization Variables
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local BotsFolder = Workspace:FindFirstChild("Bots") or Instance.new("Folder", Workspace)
local Inf = math.huge

-- Create the main window
local Window = Library:CreateWindow({
    Title = "TitanCX",
    Footer = "Cursed by 32vision",
    ShowCustomCursor = false,
})

local VisualsTab = Window:AddTab("Visuals", "eye")

-- ESP Section
local ESPGroupbox = VisualsTab:AddLeftGroupbox("ESP")

-- Основной переключатель ESP
local ESPToggle = ESPGroupbox:AddToggle("ESPEnabled", {
    Text = "ESP",
    Default = false,
    Tooltip = "Enables ESP visualization",
    Callback = function(Value)
        esp.enabled = Value
    end
})

-- Переключатель для боксов
local BoxesToggle = ESPGroupbox:AddToggle("Boxes", {
    Text = "Boxes",
    Default = false,
    Tooltip = "Displays boxes around players",
    Callback = function(Value)
        esp.team_boxes[1] = Value
    end
})

-- Добавляем выбор цвета для боксов
local BoxesColor = BoxesToggle:AddColorPicker("BoxesColor", {
    Default = Color3.fromRGB(0, 255, 0), -- Зеленый цвет
    Title = "Outline",
    Transparency = 0,
    Callback = function(Value)
        esp.team_boxes[2] = Value
    end
})

-- Добавляем выбор цвета заливки для боксов
local BoxesFillColor = BoxesToggle:AddColorPicker("BoxesFillColor", {
    Default = Color3.fromRGB(0, 255, 0), -- Зеленый цвет
    Title = "Fill",
    Transparency = 0,
    Callback = function(Value)
        esp.team_boxes[3] = Value
    end
})

-- Слайдер для прозрачности заливки
ESPGroupbox:AddSlider("BoxFillTransparency", {
    Text = "Transparency",
    Default = 0.2,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Compact = false,
    Callback = function(Value)
        esp.team_boxes[4] = Value
    end
})

-- Переключатель для полосок здоровья
local HealthbarToggle = ESPGroupbox:AddToggle("Healthbar", {
    Text = "Healthbar",
    Default = false,
    Tooltip = "Displays health bars next to players",
    Callback = function(Value)
        esp.team_healthbar[1] = Value
    end
})

-- Выбор цвета для максимального здоровья
local HealthbarMaxColor = HealthbarToggle:AddColorPicker("HealthbarMaxColor", {
    Default = Color3.fromRGB(0, 255, 0), -- Зеленый цвет
    Title = "MaxHP",
    Transparency = 0,
    Callback = function(Value)
        esp.team_healthbar[2] = Value
    end
})

-- Выбор цвета для низкого здоровья
local HealthbarLowColor = HealthbarToggle:AddColorPicker("HealthbarLowColor", {
    Default = Color3.fromRGB(255, 0, 0), -- Красный цвет
    Title = "LowHP",
    Transparency = 0,
    Callback = function(Value)
        esp.team_healthbar[3] = Value
    end
})

-- Слайдер для настройки толщины полосок здоровья
ESPGroupbox:AddSlider("HealthbarThickness", {
    Text = "HPBarThickness",
    Default = 1,
    Min = 1,
    Max = 5,
    Rounding = 0,
    Compact = false,
    Tooltip = "Adjusts the thickness of health bars in pixels",
    Callback = function(Value)
        esp.healthbar_thickness = Value
    end
})

-- Добавляем раздел для настройки дистанции
local DistanceSection = ESPGroupbox:AddDivider()

-- Переключатель для ограничения дистанции
local LimitDistanceToggle = ESPGroupbox:AddToggle("LimitDistance", {
    Text = "LimitDistance",
    Default = false,
    Tooltip = "Enable distance limit for ESP",
    Callback = function(Value)
        esp.limitdistance = Value
    end
})

-- Слайдер для максимальной дистанции
ESPGroupbox:AddSlider("MaxDistance", {
    Text = "MaxDistance",
    Default = 5000,
    Min = 100,
    Max = 10000,
    Rounding = 0,
    Suffix = "m",
    Compact = false,
    Tooltip = "Maximum distance to show ESP elements",
    Callback = function(Value)
        esp.maxdistance = Value
    end
})

-- Раздел для трейсеров
local TracersSection = ESPGroupbox:AddDivider()

-- Переключатель для трейсеров
local TracersToggle = ESPGroupbox:AddToggle("Tracers", {
    Text = "Tracers",
    Default = false,
    Tooltip = "Draw lines to players",
    Callback = function(Value)
        esp.tracers = Value
    end
})

-- Добавляем выбор цвета для трейсеров
local TracersColor = TracersToggle:AddColorPicker("TracersColor", {
    Default = Color3.fromRGB(255, 255, 255), -- Белый цвет
    Title = "Color",
    Transparency = 0,
    Callback = function(Value)
        esp.tracer_color = Value
    end
})

-- Выбор начальной точки трейсера
ESPGroupbox:AddDropdown("TracerOrigin", {
    Text = "Origin",
    Default = "Bottom",
    Values = {"Bottom", "Top", "Center"},
    Tooltip = "Where to draw tracers from",
    Callback = function(Value)
        esp.tracer_origin = Value
    end
})

-- Слайдер для толщины трейсеров
ESPGroupbox:AddSlider("TracerThickness", {
    Text = "Thickness",
    Default = 1,
    Min = 1,
    Max = 5,
    Rounding = 0,
    Compact = false,
    Tooltip = "Tracer line thickness",
    Callback = function(Value)
        esp.tracer_thickness = Value
    end
})

-- Добавляем раздел для текстовых элементов
local TextSection = ESPGroupbox:AddDivider()

-- Переключатель для имен игроков
local NamesToggle = ESPGroupbox:AddToggle("Names", {
    Text = "Names",
    Default = false,
    Tooltip = "Show player names above boxes",
    Callback = function(Value)
        esp.team_names[1] = Value
    end
})

-- Выбор цвета для имен
local NamesColor = NamesToggle:AddColorPicker("NamesColor", {
    Default = Color3.fromRGB(255, 255, 255), -- Белый цвет
    Title = "Color",
    Transparency = 0,
    Callback = function(Value)
        esp.team_names[2] = Value
    end
})

-- Переключатель для дистанции
ESPGroupbox:AddToggle("Distance", {
    Text = "Distance",
    Default = false,
    Tooltip = "Show distance to players in meters",
    Callback = function(Value)
        esp.team_distance = Value
    end
})

-- Выпадающий список для выбора шрифта
local availableFonts = {"Plex", "System", "UI", "Monospace", "SourceSans"}
ESPGroupbox:AddDropdown("FontSelector", {
    Text = "Font",
    Default = "Plex",
    Values = availableFonts,
    Tooltip = "Select font for ESP text",
    Callback = function(Value)
        esp.font = Value
    end
})

-- Слайдер для размера текста
ESPGroupbox:AddSlider("TextSize", {
    Text = "TextSize",
    Default = 13,
    Min = 10,
    Max = 20,
    Rounding = 0,
    Compact = false,
    Callback = function(Value)
        esp.textsize = Value
    end
})

-- Настройка фиксированных размеров
ESPGroupbox:AddToggle("FixedSizeToggle", {
    Text = "FixedSize",
    Default = true,
    Tooltip = "Use fixed size for ESP boxes",
    Callback = function(Value)
        esp.fixed_size_enabled = Value
    end
})

-- Слайдеры для настройки размеров боксов
ESPGroupbox:AddSlider("BoxWidthSlider", {
    Text = "Width",
    Default = 4,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        esp.fixed_box_width = Value
    end
})

ESPGroupbox:AddSlider("BoxHeightSlider", {
    Text = "Height",
    Default = 6,
    Min = 1,
    Max = 15,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        esp.fixed_box_height = Value
    end
})

-- Переключатель для проверки видимости
ESPGroupbox:AddToggle("VisibleCheck", {
    Text = "VisibleCheck",
    Default = false,
    Tooltip = "Only show ESP for visible players",
    Callback = function(Value)
        esp.visiblecheck = Value
    end
})

-- Добавляем переключатель для обводки
ESPGroupbox:AddToggle("Outlines", {
    Text = "Outlines",
    Default = true,
    Tooltip = "Enables outlines for ESP elements",
    Callback = function(Value)
        esp.outlines = Value
    end
})
